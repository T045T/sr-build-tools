#!/usr/bin/python

import os, sys, logging, optparse, re
from xml.sax.saxutils import escape
import jenkins
import urllib2

class SrJenkinsJob(object):
    def __init__(self, name=""):
        self._name        = name
        self.bzr_source   = ""
        self.labels       = ""
        self.package      = ""
        self.disabled     = True
        self.schedule     = ""

    @property
    def name(self):
        """name getter. If no name has been set creates a name from the labels
        and package name"""
        if self._name:
            return self._name
        n = self.labels
        n = re.sub(r'\s+[&|]+\s+', '-', n)
        n = re.sub(r'\s+', '_', n)
        n = n + '-' + self.package
        return n

    @name.setter
    def name(self, val):
        self._name = val

    def __str__(self):
        return "%(_name)s '%(labels)s' %(bzr_source)s %(package)s" % self.__dict__ 

    def as_xml(self):
        """Generate the XML for this job"""
        xml = """
        <project>
          <actions/>
          <description></description>
          <keepDependencies>false</keepDependencies>
          <properties/>
          <scm class="hudson.plugins.bazaar.BazaarSCM">
            <source>%(bzr_source)s</source>
            <clean>true</clean>
            <checkout>false</checkout>
          </scm>
          <assignedNode>%(labels)s</assignedNode>
          <canRoam>false</canRoam>
          <disabled>%(disabled)s</disabled>
          <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
          <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
          <triggers class="vector">
            <hudson.triggers.SCMTrigger>
              <spec>%(schedule)s</spec>
            </hudson.triggers.SCMTrigger>
          </triggers>
          <concurrentBuild>false</concurrentBuild>
          <builders>
            <hudson.tasks.Shell>
              <command>/home/jenkins/sr-build-tools/bin/sr-jenkins-build %(package)s</command>
            </hudson.tasks.Shell>
          </builders>
          <publishers>
            <hudson.tasks.junit.JUnitResultArchiver>
              <testResults>test_results/_hudson/*.xml</testResults>
              <keepLongStdio>false</keepLongStdio>
              <testDataPublishers/>
            </hudson.tasks.junit.JUnitResultArchiver>
            <org.jenkinsci.plugins.emotional__jenkins.EmotionalJenkinsPublisher/>
          </publishers>
          <buildWrappers/>
        </project>
        """ 
        var = self.__dict__
        var['labels']   = escape(self.labels)
        var['disabled'] = 'True' if self.disabled else 'False'
        return xml % var

class CmdError(Exception):
    def __init__(self,msg,status=23):
        self.msg    = msg
        self.status = status
    def __str__(self):
        return self.msg

class SrJenkinsJobsCmd:
    def __init__(self):
        self.opts = None
        self.args = None
        self.log  = logging.getLogger('hello')
        self.log.setLevel(logging.DEBUG)
        self._j = None
    
    @property
    def j(self):
        """Get the jenkins handle. Auto connects on first call."""
        if not self._j:
            self.connect()
        return self._j

    def connect(self):
        """Connect to the jenkins server"""
        try:
            self._j = jenkins.Jenkins(
                    self.opts.jenkins_url, self.opts.username, self.opts.password)
            self._j.get_info() # Test the connection, throws if bad
        except urllib2.URLError as e:
            raise CmdError("Failed to connect to %s : %s"
                    % (self.opts.jenkins_url,e))
        self.log.info("Connected to %s" % self.opts.jenkins_url)
        return True


    def run(self):
        optp = optparse.OptionParser()
        optp.add_option('--quiet', '-q', action="store_true", default=False,
                help="Don't log what is happening, only errors")
        optp.add_option('--jenkins_url', '--url', '-j',
                default=os.environ['JENKINS_URL']
                    if 'JENKINS_URL' in os.environ else 'http://localhost:8080',
                help="Base url for the jenkins server. If not given will read "
                     "JENKINS_URL from the environment then try localhost:8080")
        optp.add_option('--password', '-p', default='')
        optp.add_option('--username', '-u', default='')
        optp.add_option('--xml', action="store_true", default=False)
        optp.add_option('--enable', action="store_true", default=False)
        optp.add_option('--schedule', default='*/5 * * * *')
        optp.add_option('--replace',  action="store_true", default=False,
                help='If a job with the same name exists delete it before create')
        optp.add_option('--name', default='')
        optp.add_option('--prefix', default='sr-',
                help="Prefix all job names with this. Handy way to identify "
                     "them later.")
        optp.add_option('--bzr_source', default='')
        optp.add_option('--package', default='')
        optp.add_option('--labels', default='')

        optp.add_option('--stack', default='')
        optp.add_option('--distros', '--distro', '--dist', action='append' )
        optp.add_option('--dist-releases', '--dist-release', '--release', action='append' )
        optp.add_option('--architectures', '--arch', action='append' )
        optp.add_option('--branches', '--branch', action='append')
        optp.add_option('--ros-versions', '--ros', action='append')
        optp.add_option('--packages', '--pkg', action='append')
        self.opts, self.cmd_args = optp.parse_args()

        if self.opts.jenkins_url and not re.match(r'^http://', self.opts.jenkins_url):
            self.opts.jenkins_url = "http://"+self.opts.jenkins_url

        # Set the logger up
        ch = logging.StreamHandler()
        if self.opts.quiet:
            level = logging.WARNING
        else:
            level = logging.INFO
        ch.setLevel(level)
        ch.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
        self.log.addHandler(ch)

        # Dispatch
        try:
            if len(self.cmd_args) < 1:
                raise CmdError("No command", 8)
 
            self.cmd = self.cmd_args.pop(0)
            if self.cmd == 'add':
                return self.cmd_add()
            elif self.cmd in ['list']:
                return self.cmd_list()
            elif self.cmd in ['add-packages', 'add-pkg']:
                return self.cmd_add_packages()
            elif self.cmd in ['delete', 'del']:
                return self.cmd_delete()
            else:
                raise CmdError("Unknown command %s" % self.cmd, 9)
        except CmdError as err:
            self.log.error(err)
            return err.status
        except:
            raise
        return 0

    def cmd_list(self):
        """List jobs"""
        filt_re = None
        if self.cmd_args:
            filt_re = self.cmd_args[0]
        
        jobs = self.j.get_jobs()
        for job in jobs:
            if not filt_re or re.match(filt_re, job['name']):
                print("%(color)10s - %(name)s" % job)

    def cmd_delete(self):
        """Delete jobs named on command line"""
        for name in self.cmd_args:
            self.del_job(SrJenkinsJob(name))

    def cmd_add(self):
        """Add a new job on the server"""
        job = SrJenkinsJob()
        job.name       = self.opts.name 
        job.package    = self.opts.package 
        job.bzr_source = self.opts.bzr_source 
        job.labels     = self.opts.labels 
        job.schedule   = self.opts.schedule 
        self.add_job(job)
        return 0

    def cmd_add_packages(self):
        """Generate a set of jobs from the options."""

        if not self.opts.stack:
            raise CmdError("No stack")
        if not self.opts.distros:
            raise CmdError("No distros")
        if not self.opts.dist_releases:
            raise CmdError("No releases")
        if not self.opts.architectures:
            raise CmdError("No architectures")
        if not self.opts.ros_versions:
            raise CmdError("No ros_versions")
        if not self.opts.branches:
            raise CmdError("No branches")
        if not self.opts.packages:
            raise CmdError("No packages")

        stack = self.opts.stack
        for dist in self.opts.distros:
            for rel in self.opts.dist_releases:
                for arch in self.opts.architectures:
                    for rosv in self.opts.ros_versions:
                            for branch in self.opts.branches:
                                for pkg in self.opts.packages:
                                    self.add_package(
                                                stack=stack,
                                                dist=dist,
                                                rel=rel,
                                                arch=arch,
                                                rosv=rosv,
                                                branch=branch, 
                                                pkg=pkg
                                            )
        return 0

    def add_package(self, **args):
        """Add a package using the given config"""
        job_name = "%(dist)s-%(rel)s-%(arch)s-%(rosv)s-%(stack)s-%(branch)s-%(pkg)s" % args
        job = SrJenkinsJob()
        job.name       = job_name 
        job.package    = args['pkg'] 
        job.bzr_source = "lp:~shadowrobot/%(stack)s/%(branch)s" % args 
        job.labels     = " && ".join((args['dist'], args['rel'], args['arch']))
        job.schedule   = self.opts.schedule 
        self.add_job(job)

    def add_job(self, job):
        """Add a SrJenkinsJob, logging the action"""
        if self.opts.enable:
            job.disabled = False
        
        if self.opts.prefix:
            job.name = self.opts.prefix + job.name

        if self.opts.xml:
            print("Job: %s" % job.name);
            print(job.as_xml());
            return 0

        if self.j.job_exists(job.name):
            if self.opts.replace:
                self.del_job(job)
            else:
                raise CmdError("Job %s already exists"%job.name, 10)
        self.j.create_job(job.name, job.as_xml())
        state = 'Enabled' if job.disabled else 'Disabled'
        self.log.info("Created job %s - %s" % (job.name, state))

    def del_job(self, job):
        """Delete a SrJenkinsJob, logging the action"""
        self.j.delete_job(job.name)
        self.log.info("Deleted job %s" % job.name)


if __name__ == '__main__':
    sys.exit(SrJenkinsJobsCmd().run())

"""
Add a job with an explicit name:

    ./bin/sr-jenkins-jobs add --name TestJob --package sr_robot_msgs --bzr_source lp:~shadowrobot/sr-ros-interface/smoke-test --labels "ubuntu && lucid && amd64"

Drop the name opt to get auto generated name:
    
    ./bin/sr-jenkins-jobs add --package sr_robot_msgs --bzr_source lp:~shadowrobot/sr-ros-interface/smoke-test --labels "ubuntu && lucid && amd64"

Use --xml flag to see the job XML instead of adding the job to the server.

    ./bin/sr-jenkins-jobs add --package sr_robot_msgs --bzr_source lp:~shadowrobot/sr-ros-interface/smoke-test --labels "ubuntu && lucid && amd64" --xml

Set up a jobs for sr_utilities and sr_robot_msgs packages (smoke-test branch) on
ubuntu lucid amd64:

    sr-jenkins-jobs add --stack=sr-ros-interface --dist ubuntu --rel=lucid --arch=amd64 --branch=smoke-test --ros=electric --pkg sr_utilities --pkg sr_robot_msgs

Generate a whole load of builds :)

    sr-jenkins-jobs add-pkg --stack=sr-ros-interface --dist ubuntu --rel=lucid --rel=oneiric --arch=i386 --arch=amd64 --branch=smoke-test --ros=electric --ros=diamondback --pkg sr_utilities --pkg sr_robot_msgs

"""
