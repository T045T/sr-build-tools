#!/usr/bin/env python
#
# Copyright 2011 Shadow Robot Company Ltd.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Requires launchpadlib:
#
#     $ sudo apt-get install python-launchpadlib
#     # or
#     pip install launchpadlib
#

import os, sys, subprocess
from launchpadlib.launchpad import Launchpad

class LPMirror(object):
    def __init__(self,
                 cachedir         = "~/.launchpadlib/cache",
                 credentials_file = None,
                 local_bzr        = '/srv/bzr',
                 teams            = [],
                 ):
        """
        Bzr mirror LP branches to a local repo
        """
        self.lp = Launchpad.login_with(
                'LP Branch Mirror', 'production', cachedir,
                credential_save_failed = self.no_credential,
                credentials_file = credentials_file)
        self.local_bzr = local_bzr
        self.teams     = teams

    def no_credential(self):
        print "Can't proceed without Launchpad credential."
        sys.exit()

    def mirror(self):
        """
        Run the mirror.
        """
        for team_name in self.teams:
            team = self.lp.people(team_name)
            for branch in team.getBranches():
                self.mirror_branch(branch)

    def mirror_branch(self, branch):
        # Use the lp: string to work out the project and branch names.
        project = ""
        branch_name = "trunk"
        bits = branch.bzr_identity.split('/')
        l = len(bits)
        if l == 1: # e.g. lp:sr-build-tools
            project = bits[0][3:] # remove lp:
        elif l == 2: # e.g. lp:sr-manipulation/stable
            project     = bits[0][3:] # remove lp:
            branch_name = bits[1]
        elif l == 3: # e.g. lp:~shadowrobot/sr-ros-interface/manip-electric
            project     = bits[1]
            branch_name = bits[2]

        print "==== " + str(branch) + " ===="
        if not self.project_exists(project):
            self.project_init(project)
        if self.branch_exists(project, branch_name):
            self.branch_pull(project, branch_name)
        else:
            self.branch_init(project, branch_name, branch.bzr_identity)

    def project_exists(self, name):
        if os.path.exists(os.path.join(self.local_bzr, name)):
            return True
        return False

    def project_init(self, name):
        path = os.path.join(self.local_bzr, name)
        cmd = ["bzr", "init-repository", "--no-trees", path]
        print cmd
        subprocess.check_call(cmd)

    def branch_exists(self, project, name):
        if os.path.exists(os.path.join(self.local_bzr, project, name)):
            return True
        return False

    def branch_pull(self, project, name):
        path = os.path.join(self.local_bzr, project, name)
        cmd = ["bzr", "pull", "--directory", path, "--overwrite"]
        print cmd
        subprocess.check_call(cmd)

    def branch_init(self, project, name, lpid):
        path = os.path.join(self.local_bzr, project, name)
        cmd = ["bzr", "branch", lpid, path]
        print cmd
        subprocess.check_call(cmd)



if __name__ == "__main__":
    obj = LPMirror( teams=['shadowrobot'] )
    obj.mirror()
