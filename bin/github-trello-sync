#!/usr/bin/env python

from pprint import PrettyPrinter
from datetime import datetime
import re, sys
import yaml

from trello import TrelloApi
from github import Github

pp = PrettyPrinter(indent=4)

#
# Config
#

class Config(object):
    """Holds config for the script, applies defaults and loads from files."""
    def __init__(self):
        self.trello_api_key = ''
        self.trello_token = ''
        self.shadow_board_id = 'fnCbWCKD'
        self.github_user = ''
        self.github_password = ''
        self.new_card_list_name = 'Backlog'
        # Use this label (identified by color on trello) to mark all cards this
        # script manages.
        self.trello_label = 'purple'

    def load(self, filepath):
        data = yaml.load(file(filepath))
        for k,v in data.iteritems():
            setattr(self, k, v)

conf = Config()
conf.load('github-trello-sync.yaml')
#pp.pprint(conf.__dict__)

if not conf.github_user:
    conf.github_user = raw_input("Github user:")
if not conf.github_password:
    conf.github_password = raw_input("Github password:")


#
# Connect and get lists, cards, issues etc
#

trello = TrelloApi(conf.trello_api_key, conf.trello_token)
# The conf.trello_token above is obtained by visiting this url in browser, while
# logged in to trello
token_url = trello.get_token_url('Shadow Sync', expires='30days', write_access=True)
print "Token url:%s"%token_url

github = Github(conf.github_user, conf.github_password)

#board = trello.boards.get(conf.shadow_board_id)
#print "\n\n################ Boards ##################\n"
#pp.pprint(board)

# Get the lists (the stacks of cards, e.g. Current, Backlog etc) from Trello
lists = trello.boards.get_list(conf.shadow_board_id)
new_card_list_id = None
#pp.pprint(lists)
lists_by_id = {}
list_names = []
for l in lists:
    list_names.append(l['name'])
    lists_by_id[l['id']] = l
    print "Found list %s"%l['name']
    if l['name'] == conf.new_card_list_name:
        new_card_list_id = l['id']

if new_card_list_id is None:
    print "ERROR: Couldn't find new card list: %s"%new_card_list_name
    sys.exit(10)

# Get the cards from Trello
# Filter to only the ones from github
all_cards = trello.boards.get_card(conf.shadow_board_id)
cards = []
for card in all_cards:
    for l in card['labels']:
        if l['color'] == conf.trello_label:
            break
    else: # Not tagged as managed so ignore
        continue
    m = re.search(r'^Issue:\s*(\d+)\s*$', card['desc'], re.MULTILINE)
    if not m:
        print "ERROR: Failed to get github issue id from card id:%s name:%s"%(card['id'], card['name'])
        continue
    cards.append(card)
    issue_id = m.group(1)
    list_name = lists_by_id[card['idList']]['name']
    print "Found card %s for git issue: '%s' in %s"%(card['id'], issue_id, list_name)
    # Stash the parsed github id in the cards data
    card['_github_issue_id'] = str(issue_id)
#pp.pprint(cards)

# Get the issue list from github. This call returns only open tickets.
org = github.get_organization('shadow-robot')
issues = org.get_issues(filter="all")
issues_by_id = {}
for issue in issues:
    print "Github issue: " + str(issue.id) + " " + str(issue.title)
    issues_by_id[str(issue.id)] = issue


#
# Sync the Trello cards with github
#

def issue_card_name(issue):
    return "[" + issue.repository.name + "] " + str(issue.title)

def sync_card_issue(card, issue):
    name = issue_card_name(issue)
    if not name == card['name']:
        trello.cards.update_name(card['id'], name)

    desc = issue.body + "\n\n"
    desc += "URL: %s\n"%(issue.html_url)
    desc += "Issue: %s\n"%(issue.id)
    if not desc == card['desc']:
        trello.cards.update_desc(card['id'], desc)

    # We label the issues in github with the list name from trello
    cur_labels = set(l.name for l in issue.labels)
    new_labels = cur_labels - set(list_names) # Remove all list labels
    new_labels.add(lists_by_id[card['idList']]['name']) # Add the 1 we want
    if not new_labels == cur_labels:
        issue.edit(labels=list(new_labels))

# Add cards for new github tickets
# Any issue not in this list is not in trello so needs adding
card_issue_ids = [ str(c['_github_issue_id']) for c in cards ]
for issue in issues:
    if str(issue.id) in card_issue_ids:
        continue
    card_name = issue_card_name(issue)
    print "Adding card: %s"%(card_name)
    new_card = trello.cards.new(card_name, new_card_list_id)
    # Add the card to the list so it will also get synced below, adding the
    # rest of its details, desc etc.
    new_card['_github_issue_id'] = str(issue.id)
    cards.append(new_card)
    trello.cards.new_label(new_card['id'], conf.trello_label)

# Sync cards and issues
for card in cards:
    if str(card['_github_issue_id']) not in issues_by_id:
        # Close card where there is no issue
        print "Archiving card %s (issue %s)"%(card['id'], card['_github_issue_id'])
        trello.cards.update_closed(card['id'], "true")
    else:
        # Card is active so update
        print "Syncing card %s (issue %s)"%(card['id'], card['_github_issue_id'])
        sync_card_issue(card, issues_by_id[card['_github_issue_id']])


