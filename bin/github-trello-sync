#!/usr/bin/env python


from pprint import PrettyPrinter
from datetime import datetime
import re, sys, logging, time
import yaml

from trello import TrelloApi
from github import Github

pp = PrettyPrinter(indent=4)

# Setup logging object
log = logging.getLogger(__name__)
ch = logging.StreamHandler()
formatter = logging.Formatter('[%(asctime)s] %(levelname)s - %(message)s')
ch.setFormatter(formatter)
log.addHandler(ch)


#
# Config
#

class Config(object):
    """Holds config for the script, applies defaults and loads from files."""
    def __init__(self):
        self.log_level = 'WARNING'
        self.trello_api_key = ''
        self.trello_token = ''
        self.trello_board_id = 'fnCbWCKD'
        # Use this label (identified by color on trello) to mark all cards this
        # script manages.
        self.trello_label = 'purple'
        # List name to add new cards to ie new tickets coming in
        self.new_card_list_name = 'Backlog'
        self.github_user = ''
        self.github_password = ''
        self.github_organization = 'shadow-robot'
        self.github_2_trello_user = {}
        self.trello_2_github_user = {}

    def load(self, filepath):
        data = yaml.load(file(filepath))
        for k,v in data.iteritems():
            setattr(self, k, v)
        self.process()

    def process(self):
        # Convert log level str to constant
        if isinstance(self.log_level, str):
            numeric_level = getattr(logging, self.log_level.upper(), None)
            if not isinstance(numeric_level, int):
                raise ValueError('Invalid log level: %s' % loglevel)

        # Build reverse lookup for users
        self.trello_2_github_user = {}
        for k,v in self.github_2_trello_user.iteritems():
            self.trello_2_github_user[v] = k

conf = Config()
conf.load('github-trello-sync.yaml')
#pp.pprint(conf.__dict__)

if not conf.github_user:
    conf.github_user = raw_input("Github user:")
if not conf.github_password:
    conf.github_password = raw_input("Github password:")

log.setLevel(conf.log_level)


#
# Setup API objects
#

trello = TrelloApi(conf.trello_api_key, conf.trello_token)
# The conf.trello_token above is obtained by visiting this url in browser, while
# logged in to trello
token_url = trello.get_token_url('Shadow Sync', expires='30days', write_access=True)
log.info("Token url:%s"%token_url)

github = Github(conf.github_user, conf.github_password)

# Throws if not found.
github_org = github.get_organization(conf.github_organization)

# Throws if not found.
trello_board = trello.boards.get(conf.trello_board_id)


#
# Users and user mapping
#
# Note that trello forces all usernames to lowercase but github seems to
# prserve case, so we make ALL names lowercase for matching

# Get the list of trello_members
trello_members_by_username = {}
for m in trello.boards.get_member(conf.trello_board_id):
    trello_members_by_username[m['username'].lower()] = m

# Get the github members
github_members_by_username = {}
for m in github_org.get_members():
    log.info("Github member:%s"%m.login)
    github_members_by_username[m.login.lower()] = m

def github_2_trello_user(guser):
    """
    Maps a github user to a trello user.
    @param Git user from api, a github.NamedUser.NamedUser object.
    @return Trello user json, as returned by API.
    """
    if guser is None:
        return None
    name = guser.login.lower()
    if name not in trello_members_by_username:
        # Github and trello usernames dont match, so try config mapping
        if name in conf.github_2_trello_user:
            name = conf.github_2_trello_user[name]
        else:
            name = None
    if name in trello_members_by_username:
        return trello_members_by_username[name]
    log.warn("Failed to find trello user for github user:%s"%guser.login)
    return None

def trello_2_github_user(tuser):
    """
    Maps a trello user to a gihub user.
    @param Trello user json, as returned by API.
    @return Git user from api, a github.NamedUser.NamedUser object.
    """
    if tuser is None:
        return None
    name = tuser['username'].lower()
    if name not in github_members_by_username:
        # Github and trello usernames dont match, so try config mapping
        if name in conf.trello_2_github_user:
            name = conf.trello_2_github_user[name]
        else:
            name = None
    if name in github_members_by_username:
        return github_members_by_username[name]
    log.warn("Failed to find github user for trello user:%s"%tuser['username'])
    return None


#
# Trello lists, cards and github issues
#

# Get the lists (the stacks of cards, e.g. Current, Backlog etc) from Trello
lists = trello.boards.get_list(conf.trello_board_id)
new_card_list_id = None
lists_by_id = {}
list_names = []
for l in lists:
    list_names.append(l['name'])
    lists_by_id[l['id']] = l
    log.info("Found list %s"%l['name'])
    if l['name'] == conf.new_card_list_name:
        new_card_list_id = l['id']

if new_card_list_id is None:
    log.error("Couldn't find new card list: %s"%new_card_list_name)
    sys.exit(10)

def get_github_issues():
    """
    Get the issue list from github. This call returns only open tickets.
    Returns issues as a dict of issue objects keyed on the issue id.
    """
    github_issues = {}
    for issue in github_org.get_issues(filter="all"):
        log.info("Github issue: " + str(issue.id) + " " + str(issue.title))
        github_issues[str(issue.id)] = issue
    return github_issues

def get_trello_cards(github_issues):
    """
    Get the cards from Trello. Filter to only the ones from github (by label).
    Pass a dict of github issues to link cards with matching github issue.
    """
    all_cards = trello.boards.get_card(conf.trello_board_id)
    cards = []
    for card in all_cards:
        for l in card['labels']:
            if l['color'] == conf.trello_label:
                break
        else: # Not tagged as managed so ignore
            continue
        m = re.search(r'^Issue:\s*(\d+)\s*$', card['desc'], re.MULTILINE)
        if not m:
            log.error("Failed to get github issue id from card id:%s name:%s"%(card['id'], card['name']))
            continue
        issue_id = m.group(1)
        list_name = lists_by_id[card['idList']]['name']
        log.info("Found card %s for git issue: '%s' in %s"%(card['id'], issue_id, list_name))
        # Find the matching github issue and link, set none if no issue found
        card['_github_issue'] = None
        if str(issue_id) in github_issues:
            card['_github_issue'] = github_issues[str(issue_id)]
        cards.append(card)
    return cards


#
# Sync the Trello cards with github
#

def issue_card_name(issue):
    return "[" + issue.repository.name + "] " + str(issue.title)

def sync_card_issue(card, issue):
    name = issue_card_name(issue)
    if not name == card['name']:
        trello.cards.update_name(card['id'], name)

    desc = issue.body + "\n\n"
    desc += "URL: %s\n"%(issue.html_url)
    desc += "Issue: %s\n"%(issue.id)
    if not desc == card['desc']:
        trello.cards.update_desc(card['id'], desc)

    # We label the issues in github with the list name from trello
    cur_labels = set(l.name for l in issue.labels)
    new_labels = cur_labels - set(list_names) # Remove all list labels
    new_labels.add(lists_by_id[card['idList']]['name']) # Add the 1 we want
    if not new_labels == cur_labels:
        issue.edit(labels=list(new_labels))

    # Sync users
    members = trello.cards.get_member(card['id'])
    tuser = github_2_trello_user(issue.assignee)
    if not members and tuser:
        # Github user set but trello not set - set trello to github
        trello.cards.new_member(card['id'], tuser['id'])
    elif members:
        # Card is assigned so update github
        if not tuser or not tuser['id'] == members[0]['id']:
            guser = trello_2_github_user(members[0])
            if guser:
                issue.edit(assignee=guser)

def sync():
    """Sync cards and issues."""
    log.info("Starting sync")
    start_t = time.time()
    github_issues = get_github_issues()
    cards = get_trello_cards(github_issues)

    # Add cards for new github tickets
    # Any issue not in this list is not in trello so needs adding
    card_issue_ids = [ str(c['_github_issue'].id) for c in cards ]
    for issue in github_issues.values():
        if str(issue.id) in card_issue_ids:
            continue
        card_name = issue_card_name(issue)
        log.info("Adding card: %s"%(card_name))
        new_card = trello.cards.new(card_name, new_card_list_id)
        # Add the card to the list so it will also get synced below, adding the
        # rest of its details, desc etc.
        new_card['_github_issue'] = issue
        cards.append(new_card)
        trello.cards.new_label(new_card['id'], conf.trello_label)

    # Sync cards and issues
    for card in cards:
        if not card['_github_issue']:
            # Close card where there is no issue
            log.info("Archiving card %s (issue %s)"%(card['id'], card['_github_issue'].id))
            trello.cards.update_closed(card['id'], "true")
        else:
            # Card is active so update
            log.info("Syncing card %s (issue %s)"%(card['id'], card['_github_issue'].id))
            sync_card_issue(card, card['_github_issue'])

    end_t = time.time()
    dt = end_t - start_t
    log.info("Finished sync %s issues in %ss"%(len(github_issues), dt))

sync()
