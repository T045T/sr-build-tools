---
# Playbook for Deb files check

- name: check if project_sources_path variable was set
  fail: msg="Variable project_sources_path was not set"
  when: project_sources_path is not defined

- name: Read all packages paths in project
  shell: find -type f -name package.xml -printf "%h\n" chdir={{project_sources_path}}
  register: package_paths_list

- name: Set variable to workaround ansible type evaluation issue
  set_fact:
    package_paths_list_stdout_lines: "{{package_paths_list.stdout_lines}}"

- name: Clean debian packages folders in case of the cached build
  shell: bash -c "rm -rf ./debian && rm -rf ./obj-x86_64-linux-gnu"
    chdir={{project_sources_path}}/{{item}}
  with_items: "{{package_paths_list_stdout_lines|default([])}}"
  ignore_errors: True

- name: Add line to rosdep package cache
  lineinfile: dest=/etc/ros/rosdep/sources.list.d/20-default.list line="yaml file://{{project_sources_path}}/local_custom_rosdep.yaml"

- name: Create empty file or clean existing one
  shell: bash -c "cat /dev/null > {{project_sources_path}}/local_custom_rosdep.yaml"

- name: Clean debian packages from project directory
  shell: bash -c "find . -name '*.deb' -type f -delete"
    chdir={{project_sources_path}}
  ignore_errors: True

- name: Append project packages to rosdep ignore list
  shell: bash -c "echo {{item|basename}}:{ubuntu:[]} >> {{project_sources_path}}/local_custom_rosdep.yaml"
  with_items: "{{package_paths_list_stdout_lines|default([])}}"

- name: Update rosdep
  shell: bash -c "rosdep update"

- name: create, build and install debian packages recursively in order to fix local dependencies
  shell: bash -c "! ls {{project_sources_path}}/{{item[1]}}/*.deb && source /opt/ros/{{ros_release}}/setup.bash && bloom-generate rosdebian --os-name ubuntu --os-version trusty --ros-distro {{ros_release}} && fakeroot ./debian/rules binary && mv -vt .  ../*.deb && sudo dpkg --install *.deb"  chdir={{project_sources_path}}/{{item[1]}}
  ignore_errors: True
  with_nested:
    - "{{package_paths_list_stdout_lines|default([])}}"
    - "{{package_paths_list_stdout_lines|default([])}}"

- name: check if everything was successfully installed
  shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && bloom-generate rosdebian --os-name ubuntu --os-version trusty --ros-distro {{ros_release}} && fakeroot ./debian/rules binary && mv -vt .  ../*.deb && sudo dpkg --install *.deb"  chdir={{project_sources_path}}/{{item}}
  with_items:
    - "{{package_paths_list_stdout_lines|default([])}}"

- name: remove all installed packages
  shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && sudo dpkg --purge *.deb"  chdir={{project_sources_path}}
