---
# Set up a ROS workspace, install a .rosinstall and compile.

- name: Create workspace {{ros_workspace}}
  file: state=directory path={{ros_workspace}}/src owner={{ros_user}} group=ros
  sudo: yes
  sudo_user: "{{ros_user}}"

- name: Init workspace
  command: wstool init .
    chdir={{ros_workspace}}/src
    creates={{ros_workspace}}/src/.rosinstall
  sudo: yes
  sudo_user: "{{ros_user}}"

- name: catkin_init_workspace
  shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && catkin_init_workspace"
    chdir={{ros_workspace}}/src
    creates={{ros_workspace}}/src/CMakeLists.txt
  sudo: yes
  sudo_user: "{{ros_user}}"

# Do an initial make of the empty workspace to get a setup.bash.
# If there is one already don't do this, so we don't trigger a big make
- name: catkin make workspace
  shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && catkin_make"
    chdir={{ros_workspace}}
    creates={{ros_workspace}}/devel/setup.bash
  sudo: yes
  sudo_user: "{{ros_user}}"

- name: Update users bashrc to point to the workspace
  lineinfile: dest=\~{{ros_user}}/.bashrc
              line="source {{ros_workspace}}/devel/setup.bash"
              regexp='^source.*/setup\.bash'
              insertafter=EOF
              backup=yes

- name: Copy install file
  copy: src={{ros_workspace_install}} dest=/tmp/ansible-ros-workspace.rosinstall

#
# When using private repos ssh key checks can become a pain so we generate the
# keys first.
# http://blog.kollerie.com/2014/02/18/ansible_git_ssh/
#
- name: Find repo domains
  shell: 'grep "uri" /tmp/ansible-ros-workspace.rosinstall | sed -n -e "s/^.*@\(.*\):.*$/\1/p" | sort | uniq'
  register: repo_domains

- name: Get repo hosts keys
  shell: ssh-keyscan "{{item}}"
  with_items: repo_domains.stdout_lines
  register: repo_host_keys

- name: Add host keys for repos
  lineinfile: create=yes dest="~/.ssh/known_hosts" line='{{ item.stdout }}' state=present
  with_items: repo_host_keys.results
  when: repo_host_keys.stdout is defined repo_host_keys.stdout is not ""

- name: Merge {{ros_workspace_install}} into workspace
  command: wstool merge -y /tmp/ansible-ros-workspace.rosinstall
    chdir={{ros_workspace}}/src
  # Run as root to allow forward keys for github access
  sudo: yes

- name: Workspace update
  command: wstool update chdir={{ros_workspace}}/src
  # Run as root to allow forward keys for github access
  sudo: yes

- name: Fix perms (As we installed code as root, fix the perms.)
  file: path={{ros_workspace}} recurse=yes owner={{ros_user}} group=ros

- name: Install dependancies
  shell: bash -c "source {{ros_workspace}}/devel/setup.bash && rosdep install --default-yes --all --ignore-src"
         chdir={{ros_workspace}}
  sudo: yes
  sudo_user: "{{ros_user}}"

# Now build the code we just installed.
- name: catkin_make
  shell: bash -c "source {{ros_workspace}}/devel/setup.bash && catkin_make"
    chdir={{ros_workspace}}
  sudo: yes
  sudo_user: "{{ros_user}}"
