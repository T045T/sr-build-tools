---
- hosts: all
  vars:
    ros_release: 'hydro'
    ros_user: 'hand'
    ros_user_password: 'hand'
    ros_user_email: 'software@shadowrobot.com'
    ros_workspace: ~{{ros_user}}/{{ros_release}}_ws
  #remote_user: root
  sudo: yes
  tasks:
    # Hello!
    - name: say hello
      debug: msg="Setting up ROS {{ros_release}} for {{ros_user}}"

    # Bring apt upto date
    - apt_key: id=B01FA116 url=http://packages.ros.org/ros.key
    # TODO - add repo http://packages.ros.org/ros/ubuntu
    # TODO - activate restricted, universe, multiverse
    # Update all packages to the latest version
    #- apt: upgrade=dist # dist or safe or full?
    # http://docs.ansible.com/apt_module.html
    # Only run if the last one is more than more than 10mins ago
    - apt: update_cache=yes cache_valid_time=3600

    # ROS Install
    - name: Install ROS stuff
      apt: name={{item}}
      with_items:
        - ubuntu-desktop
        - "ros-{{ros_release}}-desktop-full"
        - python-wstool
        - python-rosinstall
    - name: rosdep init
      command: rosdep init creates=/etc/ros/rosdep/sources.list.d/20-default.list

    # Install packages for the hand machine
    - name: Install packages
      apt: name={{item}}
      with_items:
        - git
        - vim
        - emacs
        - tree
        - htop

    # User setup
    - name: Add ros group
      group: name=ros

    - name: Add {{ros_user}} user
      user: name={{ros_user}}
        comment="Shadow Hand"
        shell=/bin/bash
        append=yes groups=ros,adm,sudo,plugdev,cdrom
    - name: Set users password
      shell: "echo '{{ros_user}}:{{ros_user_password}}' | chpasswd"

    - name: Give user passwordless sudo.
      lineinfile: "dest=/etc/sudoers state=present regexp='^{{ros_user}}' line='{{ros_user}}  ALL=(ALL) NOPASSWD:  ALL' insertafter=EOF"

    - name: Setup git name
      command: git config --global user.name "{{ros_user}}"
    - name: Setup git email
      command: git config --global user.email "{{ros_user_email}}"

    - name: Update rosdep
      shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && rosdep update"
      sudo: yes
      sudo_user: "{{ros_user}}"

    # Workspace
    - name: Create workspace dir {{ros_workspace}}
      file: state=directory path={{ros_workspace}}/src owner={{ros_user}} group=ros
      sudo: yes
      sudo_user: "{{ros_user}}"

    - name: Init workspace
      command: wstool init .
        chdir={{ros_workspace}}/src
        creates={{ros_workspace}}/src/.rosinstall
      sudo: yes
      sudo_user: "{{ros_user}}"

    - name: catkin_init_workspace
      shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && catkin_init_workspace"
        chdir={{ros_workspace}}/src
        creates={{ros_workspace}}/src/CMakeLists.txt
      sudo: yes
      sudo_user: "{{ros_user}}"

    # Do an initial make of the empty workspace to get a setup.bash.
    # If there is one alredy don't do this, so we don't trigger a big make
    - name: catkin make workspace
      shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && catkin_make"
        chdir={{ros_workspace}}
        creates={{ros_workspace}}/devel/setup.bash
      sudo: yes
      sudo_user: "{{ros_user}}"

    - name: Update users basrc to point to the workspace
      lineinfile: dest=\~{{ros_user}}/.bashrc
                  line="source {{ros_workspace}}/devel/setup.bash"
                  regexp='^source.*/setup\.bash'
                  insertafter=EOF
                  backup=yes

    # Install the shadow code
    - name: Install shadow src
      shell: bash -c "{{item}}" chdir={{ros_workspace}}/src
      sudo: yes
      sudo_user: "{{ros_user}}"
      with_items:
        - wstool merge -y "/opt/shadow/sr-build-tools/data/shadow_robot-{{ros_release}}.rosinstall"
        - wstool update

    # Deps and make
    #- name: Install dependancies
    #  shell: bash -c "source /opt/ros/{{ros_release}}/setup.bash && {{item}}"
    #    chdir={{ros_workspace}}/src
    #  sudo: yes
    #  sudo_user: "{{ros_user}}"
    #  with_items:
    #    - rosdep install --default-yes --all --ignore-src
    #    - catkin_make
    - name: Install dependancies
      shell: bash -c "source {{ros_workspace}}/devel/setup.bash && rosdep install --default-yes --all --ignore-src"
             chdir={{ros_workspace}}
      sudo: yes
      sudo_user: "{{ros_user}}"

    - name: catkin_make
      shell: bash -c "source {{ros_workspace}}/devel/setup.bash && catkin_make"
        chdir={{ros_workspace}}
      sudo: yes
      sudo_user: "{{ros_user}}"

  # Note: Handlers only fire after all the taks. Once for however many notifies
  #    notify:
  #    - restart ntpd
  handlers:
  #  - name: restart ntpd
  #    service: name=ntpd state=restarted

